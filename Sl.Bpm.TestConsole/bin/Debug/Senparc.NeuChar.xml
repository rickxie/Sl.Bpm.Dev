<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Senparc.NeuChar</name>
    </assembly>
    <members>
        <member name="T:Senparc.NeuChar.ApiHandlers.ApiEnlighten">
            <summary>
            API信息初始化
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.ApiHandlers.ApiEnlighten.SendText(System.String,System.String,System.String)">
            <summary>
            发送文本消息
            </summary>
            <param name="accessTokenOrAppId"></param>
            <param name="openId"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.ApiHandlers.ApiEnlighten.SendImage(System.String,System.String,System.String)">
            <summary>
            发送图片消息
            </summary>
            <param name="accessTokenOrAppId"></param>
            <param name="openId"></param>
            <param name="mediaId"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.ApiHandlers.ApiHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.ApiHandlers.ApiHandler.#ctor(Senparc.NeuChar.ApiHandlers.ApiEnlighten)">
            <summary>
            ApiHandler
            </summary>
            <param name="apiEnlighten"></param>
        </member>
        <member name="M:Senparc.NeuChar.ApiHandlers.ApiHandler.ExecuteApi(Senparc.NeuChar.MessageHandlers.Response,Senparc.NeuChar.Entities.IRequestMessageBase,System.String,System.String)">
            <summary>
            执行API
            </summary>
            <param name="response"></param>
            <param name="accessTokenOrAppId"></param>
            <param name="openId"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.BaseModel">
            <summary>
            基础模型
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Context.MessageContextGlobalConfig">
            <summary>
            消息上下文全局设置
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.Context.MessageContextGlobalConfig.Lock">
            <summary>
            上下文操作使用的同步锁
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.Context.MessageContextGlobalConfig.OmitRepeatLock">
            <summary>
            去重专用锁
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.MessageContextGlobalConfig.UseWeixinContext">
            <summary>
            是否开启上下文记录
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.Context.MessageContextGlobalConfig.UseMessageContext">
            <summary>
            是否开启上下文记录
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Context.GlobalMessageContext`3">
            <summary>
            微信消息上下文（全局）
            默认过期时间：90分钟
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.GlobalMessageContext`3.MessageCollection">
            <summary>
            所有MessageContext集合，不要直接操作此对象
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.GlobalMessageContext`3.MessageQueue">
            <summary>
            MessageContext队列（LastActiveTime升序排列）,不要直接操作此对象
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.GlobalMessageContext`3.ExpireMinutes">
            <summary>
            每一个MessageContext过期时间（分钟）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.GlobalMessageContext`3.MaxRecordCount">
            <summary>
            最大储存上下文数量（分别针对请求和响应信息）
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.Restore">
            <summary>
            重置所有上下文参数，所有记录将被清空
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetMessageContext(System.String)">
            <summary>
            获取MessageContext，如果不存在，返回null
            这个方法的更重要意义在于操作TM队列，及时移除过期信息，并将最新活动的对象移到尾部
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetMessageContext(System.String,System.Boolean)">
            <summary>
            获取MessageContext
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <param name="createIfNotExists">true：如果用户不存在，则创建一个实例，并返回这个最新的实例
            false：如用户不存在，则返回null</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetMessageContext(`1)">
            <summary>
            获取MessageContext，如果不存在，使用requestMessage信息初始化一个，并返回原始实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetMessageContext(`2)">
            <summary>
            获取MessageContext，如果不存在，使用responseMessage信息初始化一个，并返回原始实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.InsertMessage(`1)">
            <summary>
            记录请求信息
            </summary>
            <param name="requestMessage">请求信息</param>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.InsertMessage(`2)">
            <summary>
            记录响应信息
            </summary>
            <param name="responseMessage">响应信息</param>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetLastRequestMessage(System.String)">
            <summary>
            获取最新一条请求数据，如果不存在，则返回null
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Context.GlobalMessageContext`3.GetLastResponseMessage(System.String)">
            <summary>
            获取最新一条响应数据，如果不存在，则返回null
            </summary>
            <param name="userName">用户名（OpenId）</param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.Context.MessageContainer`1">
            <summary>
            消息容器（列表）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Senparc.NeuChar.Context.MessageContainer`1.MaxRecordCount">
            <summary>
            最大记录条数（保留尾部），如果小于等于0则不限制
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Context.IMessageContext`2">
            <summary>
            微信消息上下文（单个用户）接口
            </summary>
            <typeparam name="TRequest">请求消息类型</typeparam>
            <typeparam name="TResponse">响应消息类型</typeparam>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.UserName">
            <summary>
            用户名（OpenID）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.LastActiveTime">
            <summary>
            最后一次活动时间（用户主动发送Resquest请求的时间）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.RequestMessages">
            <summary>
            接收消息记录
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.ResponseMessages">
            <summary>
            响应消息记录
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.MaxRecordCount">
            <summary>
            最大储存容量（分别针对RequestMessages和ResponseMessages）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.StorageData">
            <summary>
            临时储存数据，如用户状态等，出于保持.net 3.5版本，这里暂不使用dynamic
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.ExpireMinutes">
            <summary>
            用于覆盖WeixinContext所设置的默认过期时间
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.IMessageContext`2.AppStoreState">
            <summary>
            AppStore状态，系统属性，请勿操作
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Context.MessageContext`2">
            <summary>
            微信消息上下文（单个用户）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.MessageContext`2.AppStoreState">
            <summary>
            AppStore状态，系统属性，请勿操作
            </summary>
        </member>
        <member name="E:Senparc.NeuChar.Context.MessageContext`2.MessageContextRemoved">
            <summary>
            当MessageContext被删除时触发的事件
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Context.MessageContext`2.OnMessageContextRemoved(Senparc.NeuChar.Context.WeixinContextRemovedEventArgs{`0,`1})">
            <summary>
            执行上下文被移除的事件
            注意：此事件不是实时触发的，而是等过期后任意一个人发过来的下一条消息执行之前触发。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Senparc.NeuChar.Context.MessageContext`2.#ctor">
            <summary>
            
            </summary>
            <param name="maxRecordCount">maxRecordCount如果小于等于0，则不限制</param>
        </member>
        <member name="M:Senparc.NeuChar.Context.MessageContext`2.OnRemoved">
            <summary>
            此上下文被清除的时候触发
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Context.MessageQueue`3">
            <summary>
            微信消息队列（所有微信账号的往来消息）
            </summary>
            <typeparam name="TM">IMessageContext&lt;TRequest, TResponse&gt;</typeparam>
            <typeparam name="TRequest">IRequestMessageBase</typeparam>
            <typeparam name="TResponse">IResponseMessageBase</typeparam>
        </member>
        <member name="T:Senparc.NeuChar.Context.WeixinContextRemovedEventArgs`2">
            <summary>
            对话上下文被删除时触发事件的事件数据
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.WeixinContextRemovedEventArgs`2.OpenId">
            <summary>
            该用户的OpenId
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.WeixinContextRemovedEventArgs`2.LastActiveTime">
            <summary>
            最后一次响应时间
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Context.WeixinContextRemovedEventArgs`2.MessageContext">
            <summary>
            上下文对象
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.DataEngine">
            <summary>
            数据处理引擎
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.DataEngine.#ctor(System.String)">
            <summary>
            数据处理引擎 构造函数
            </summary>
            <param name="file">文件相对路径</param>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IEntityBase">
            <summary>
            所有微信自定义实体的基础接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IMessageBase">
            <summary>
            所有Request和Response消息的接口
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.IMessageBase.ToUserName">
            <summary>
            接收人（在 Request 中为公众号的微信号，在 Response 中为 OpenId）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.IMessageBase.FromUserName">
            <summary>
            发送人（在 Request 中为OpenId，在 Response 中为公众号的微信号）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.IMessageBase.CreateTime">
            <summary>
            消息创建时间
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.MessageBase">
            <summary>
            所有Request和Response消息的基类
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MessageBase.ToUserName">
            <summary>
            接收人（在 Request 中为公众号的微信号，在 Response 中为 OpenId）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MessageBase.FromUserName">
            <summary>
            发送人（在 Request 中为OpenId，在 Response 中为公众号的微信号）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MessageBase.CreateTime">
            <summary>
            消息创建时间
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Entities.MessageBase.ToString">
            <summary>
            ToString() 方法重写
            </summary>
            <returns></returns>
        </member>
        <member name="F:Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler.DefaultMessage">
            <summary>
            DefaultMessage
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler.MatchSuccessed">
            <summary>
            是否已经匹配成功
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler.CaseSensitive">
            <summary>
            是否大小写敏感
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension">
            <summary>
            RequestMessageText 扩展
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension.StartHandler(Senparc.NeuChar.Entities.IRequestMessageText,System.Boolean)">
            <summary>
            开始匹配
            </summary>
            <param name="requestMessage"></param>
            <param name="caseSensitive">是否大小写敏感，默认为false</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension.GetResponseMessage(Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler)">
            <summary>
            获取最终响应消息
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension.Keyword(Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler,System.String,System.Func{Senparc.NeuChar.Entities.IResponseMessageBase})">
            <summary>
            匹配关键词
            </summary>
            <param name="handler"></param>
            <param name="keyword">关键词</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension.Keywords(Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler,System.String[],System.Func{Senparc.NeuChar.Entities.IResponseMessageBase})">
            <summary>
            匹配关键词（只要有一个满足即可触发）
            </summary>
            <param name="handler"></param>
            <param name="keywords">多个关键词</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension.Regex(Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler,System.String,System.Func{Senparc.NeuChar.Entities.IResponseMessageBase})">
            <summary>
            匹配正则表达式
            </summary>
            <param name="handler"></param>
            <param name="pattern">正则表达式</param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Entities.Request.RequestMessageTextExtension.Default(Senparc.NeuChar.Entities.Request.RequestMessageTextKeywordHandler,System.Func{Senparc.NeuChar.Entities.IResponseMessageBase})">
            <summary>
            默认消息
            </summary>
            <param name="handler"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult.Count">
            <summary>
            消息数量
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult.ResultList">
            <summary>
            各个单图文校验结果
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult.CheckState">
            <summary>
            整体校验结果 1-未被判为转载，可以群发，2-被判为转载，可以群发，3-被判为转载，不能群发
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList">
            <summary>
            单图文校验结果
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item">
            <summary>
            单图文校验结果
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item.ArticleIdx">
            <summary>
            群发文章的序号，从1开始
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item.UserDeclareState">
            <summary>
            用户声明文章的状态
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item.AuditState">
            <summary>
            系统校验的状态
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item.OriginalArticleUrl">
            <summary>
            相似原创文的url
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item.OriginalArticleType">
            <summary>
            相似原创文的类型
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item.CanReprint">
            <summary>
            是否能转载
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item.NeedReplaceContent">
            <summary>
            是否需要替换成原创文内容
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.CopyrightCheckResult_ResultList_Item.NeedShowReprintSource">
            <summary>
            是否需要注明转载来源
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.ScanCodeInfo">
            <summary>
            扫码事件中的ScanCodeInfo
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.SendLocationInfo">
            <summary>
            弹出地理位置选择器的事件推送中的SendLocationInfo
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.SendLocationInfo.Location_X">
            <summary>
            X坐标信息
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.SendLocationInfo.Location_Y">
            <summary>
            Y坐标信息
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.SendLocationInfo.Scale">
            <summary>
            精度，可理解为精度或者比例尺、越精细的话 scale越高
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.SendLocationInfo.Label">
            <summary>
            地理位置的字符串信息
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.SendLocationInfo.Poiname">
            <summary>
            朋友圈POI的名字，可能为空
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.SendPicsInfo">
            <summary>
            系统拍照发图中的SendPicsInfo
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.SendPicsInfo.Count">
            <summary>
            发送的图片数量
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.SendPicsInfo.PicList">
            <summary>
            图片列表
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.Md5Sum.PicMd5Sum">
            <summary>
            图片的MD5值，开发者若需要，可用于验证接收到图片
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.BaseBeaconItem">
            <summary>
            Beacon的参数以及距离
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.BaseBeaconItem.Distance">
            <summary>
            设备与用户的距离（浮点数；单位：米）
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageEvent">
            <summary>
            所有RequestMessageShortEvent的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageFile">
            <summary>
            所有RequestMessageShortFile的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageLink">
            <summary>
            所有RequestMessageLink的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageLocation">
            <summary>
            所有RequestMessageLocation的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageShortVideo">
            <summary>
            所有RequestMessageShortVideo的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageText">
            <summary>
            所有RequestMessageText的接口
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.IRequestMessageText.Content">
            <summary>
            文本消息内容
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageVideo">
            <summary>
            所有RequestMessageVideo的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageVoice">
            <summary>
            所有RequestMessageVoice的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IRequestMessageBase">
            <summary>
            请求消息基础接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.RequestMessageBase">
            <summary>
            接收到请求的消息基类
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.RequestMessageNeuChar">
            <summary>
            NeuChar 请求消息
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.RequestMessageNeuChar.ConfigRoot">
            <summary>
            设置信息（通常为JSON）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.RequestMessageUnknownType.RequestDocument">
            <summary>
            请求消息的XML对象（明文）
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.Article">
            <summary>
            文章
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.Article.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.Article.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.Article.Url">
            <summary>
            点击后跳转的链接
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.Article.PicUrl">
            <summary>
            图文消息的图片链接，支持JPG、PNG格式，较好的效果为大图640*320，小图80*80。如不填，在客户端不显示图片
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageMpNews">
            <summary>
            所有ResponseMessageMpNews的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageMusic">
            <summary>
            所有ResponseMessageMusic的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageNews">
            <summary>
            所有ResponseMessageNews的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageNoResponse">
            <summary>
            当MessageHandler接收到IResponseNothing的返回类型参数时，只会向微信服务器返回空字符串，等同于return null
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageText">
            <summary>
            所有ResponseMessageText的接口
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.IResponseMessageText.Content">
            <summary>
            文本消息内容
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageTransfer_Customer_Service">
            <summary>
            所有ResponseMessageTransfer_Customer_Service的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageVideo">
            <summary>
            所有ResponseMessageVideo的接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageVoice">
            <summary>
            所有ResponseMessageVoice的接口
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MpNewsArticle.title">
            <summary>
            图文消息的标题
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MpNewsArticle.thumb_media_id">
            <summary>
            图文消息缩略图的media_id, 可以在上传多媒体文件接口中获得。此处thumb_media_id即上传接口返回的media_id
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MpNewsArticle.author">
            <summary>
            图文消息的作者
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MpNewsArticle.content_source_url">
            <summary>
            图文消息点击“阅读原文”之后的页面链接
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MpNewsArticle.content">
            <summary>
            图文消息的内容，支持html标签
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MpNewsArticle.digest">
            <summary>
            图文消息的描述
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.MpNewsArticle.show_cover_pic">
            <summary>
            是否显示封面，1为显示，0为不显示
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.Music">
            <summary>
            Music
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.Video">
            <summary>
            Video
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.Voice">
            <summary>
            Voice
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.IResponseMessageBase">
            <summary>
            响应回复消息基类接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.ResponseMessageBase">
            <summary>
            响应回复消息基类
            </summary>
        </member>
        <!-- 对于成员“M:Senparc.NeuChar.Entities.ResponseMessageBase.CreateFromRequestMessage(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.ResponseMsgType,Senparc.NeuChar.MessageHandlers.MessageEntityEnlighten)”忽略有格式错误的 XML 注释 -->
        <member name="M:Senparc.NeuChar.Entities.ResponseMessageBase.CreateFromRequestMessage``1(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.MessageHandlers.MessageEntityEnlighten)">
            <summary>
            获取响应类型实例，并初始化
            </summary>
            <typeparam name="T">需要返回的类型</typeparam>
            <param name="requestMessage">请求数据</param>
            <param name="enlighten">MessageEntityEnlighten，当 T 为接口时必须提供</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Entities.ResponseMessageBase.CreateFromResponseXml(System.String,Senparc.NeuChar.MessageHandlers.MessageEntityEnlighten)">
            <summary>
            从返回结果XML转换成IResponseMessageBase实体类
            </summary>
            <param name="xml">返回给服务器的Response Xml</param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.Entities.ResponseMessageNoResponse">
            <summary>
            当MessageHandler接收到IResponseNothing的返回类型参数时，只会向微信服务器返回空字符串，等同于return null
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.SuccessResponseMessage">
            <summary>
            只返回"success"等指定字符串的响应信息
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Entities.SuccessResponseMessageBase">
            <summary>
            只返回"success"等指定字符串的响应信息基类
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.Entities.SuccessResponseMessageBase.ReturnText">
            <summary>
            返回字符串内容，默认为"success"
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Entities.SuccessResponseMessageBase.#ctor">
            <summary>
            SuccessResponseMessage构造函数
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.IEncryptPostModel">
            <summary>
            接收加密信息统一接口
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.IEncryptPostModel.Signature">
            <summary>
            Signature
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.IEncryptPostModel.Msg_Signature">
            <summary>
            Msg_Signature
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.IEncryptPostModel.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.IEncryptPostModel.Nonce">
            <summary>
            Nonce
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.IEncryptPostModel.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.IEncryptPostModel.EncodingAESKey">
            <summary>
            EncodingAESKey
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.EncryptPostModel">
            <summary>
            接收加密信息统一基类
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.EncryptPostModel.Signature">
            <summary>
            Signature
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.EncryptPostModel.Msg_Signature">
            <summary>
            Msg_Signature
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.EncryptPostModel.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.EncryptPostModel.Nonce">
            <summary>
            Nonce
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.EncryptPostModel.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.EncryptPostModel.EncodingAESKey">
            <summary>
            EncodingAESKey
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.EncryptPostModel.SetSecretInfo(System.String,System.String)">
            <summary>
            设置服务器内部保密信息
            </summary>
            <param name="token"></param>
            <param name="encodingAESKey"></param>
        </member>
        <member name="T:Senparc.NeuChar.NeuCharActionType">
            <summary>
            NeuChar 消息的乐行
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.NeuCharActionType.GetConfig">
            <summary>
            获取配置
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.NeuCharActionType.SaveConfig">
            <summary>
            储存配置
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.AppStoreState">
            <summary>
            AppStore状态
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.AppStoreState.None">
            <summary>
            无状态
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.AppStoreState.Enter">
            <summary>
            已进入应用状态
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.AppStoreState.Exit">
            <summary>
            退出App状态（临时传输状态，退出后即为None）
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.RequestMsgType">
            <summary>
            消息请求类型
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.ResponseMsgType">
            <summary>
            消息响应类型
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Exceptions.MessageHandlerException">
            <summary>
            MessageHandler异常
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Exceptions.UnknownRequestMsgTypeException">
            <summary>
            未知请求类型异常
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.Helpers.EntityHelper">
            <summary>
            实体帮助类
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.EntityHelper.FillEntityWithXml``1(``0,System.Xml.Linq.XDocument)">
            <summary>
            根据XML信息填充实实体
            </summary>
            <typeparam name="T">MessageBase为基类的类型，Response和Request都可以</typeparam>
            <param name="entity">实体</param>
            <param name="doc">XML</param>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.EntityHelper.FillClassValue``1(System.Object,System.Xml.Linq.XElement,System.String,System.Reflection.PropertyInfo)">
            <summary>
            填充复杂类型的参数
            </summary>
            <typeparam name="T">复杂类型</typeparam>
            <param name="entity">被填充实体</param>
            <param name="root">XML节点</param>
            <param name="childElementName">XML下一级节点的名称</param>
            <param name="prop">属性对象</param>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.EntityHelper.ConvertEntityToXml``1(``0)">
            <summary>
            将实体转为XML
            </summary>
            <typeparam name="T">RequestMessage或ResponseMessage</typeparam>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.EntityHelper.ConvertEntityToXmlString``1(``0)">
            <summary>
            将实体转为XML字符串
            </summary>
            <typeparam name="T">RequestMessage或ResponseMessage</typeparam>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.EntityHelper.CreateResponseMessage``1(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.MessageHandlers.MessageEntityEnlighten)">
            <summary>
            ResponseMessageBase.CreateFromRequestMessage&lt;T&gt;(requestMessage)的扩展方法
            </summary>
            <typeparam name="T">需要生成的ResponseMessage类型</typeparam>
            <param name="requestMessage">IRequestMessageBase接口下的接收信息类型</param>
            <param name="enlighten">MessageEntityEnlighten，当 T 为接口时必须提供</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.EntityHelper.CreateResponseMessage``1(Senparc.NeuChar.Entities.IRequestMessageBase)">
            <summary>
            ResponseMessageBase.CreateFromRequestMessage&lt;T&gt;(requestMessage)的扩展方法
            </summary>
            <typeparam name="T">需要生成的ResponseMessage类型</typeparam>
            <param name="requestMessage">IRequestMessageBase接口下的接收信息类型</param>
            <param name="enlighten">MessageEntityEnlighten，当 T 为接口时必须提供</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.EntityHelper.CreateResponseMessage``1(Senparc.NeuChar.MessageHandlers.MessageEntityEnlighten,Senparc.NeuChar.Entities.IRequestMessageBase)">
            <summary>
            ResponseMessageBase.CreateFromRequestMessage&lt;T&gt;(requestMessage)的扩展方法
            </summary>
            <typeparam name="T">需要生成的ResponseMessage类型</typeparam>
            <param name="enlighten">MessageEntityEnlighten</param>
            <param name="requestMessage">IRequestMessageBase接口下的接收信息类型</param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.EntityHelper.CreateResponseMessage(System.String,Senparc.NeuChar.MessageHandlers.MessageEntityEnlighten)">
            <summary>
            ResponseMessageBase.CreateFromResponseXml(xml)的扩展方法
            </summary>
            <param name="xml">返回给服务器的Response Xml</param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.Helpers.MsgTypeHelper">
            <summary>
            消息类型帮助类
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.MsgTypeHelper.GetRequestMsgTypeString(System.Xml.Linq.XDocument)">
            <summary>
            根据xml信息，返回RequestMsgType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.MsgTypeHelper.GetRequestMsgType(System.Xml.Linq.XDocument)">
            <summary>
            根据xml信息，返回RequestMsgType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.MsgTypeHelper.GetRequestMsgType(System.String)">
            <summary>
            根据xml信息，返回RequestMsgType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.MsgTypeHelper.GetResponseMsgType(System.Xml.Linq.XDocument)">
            <summary>
            根据xml信息，返回ResponseMsgType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.MsgTypeHelper.GetResponseMsgType(System.String)">
            <summary>
            根据xml信息，返回ResponseMsgType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.NeuralNodeHelper.FillTextMessage(System.String)">
            <summary>
            处理文本信息占位符
            </summary>
            <param name="originContent"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.Helpers.NeuralNodeHelper.GetImageMessageMediaId(Senparc.NeuChar.Entities.IRequestMessageBase,System.String)">
            <summary>
            处理图片信息MediaId填充
            </summary>
            <param name="requestMessage"></param>
            <param name="originContent"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.DefaultMessageHandlerAsyncEvent">
            <summary>
            MessageHandler事件异步方法的默认调用方法（在没有override的情况下）
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MessageHandlers.DefaultMessageHandlerAsyncEvent.DefaultResponseMessageAsync">
            <summary>
            调用DefaultResponseMessageAsync()方法
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MessageHandlers.DefaultMessageHandlerAsyncEvent.SelfSynicMethod">
            <summary>
            调用同名的同步方法（可能会导致执行会阻塞的过程）
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.MessageHandler`3">
            <summary>
            微信请求的集中处理方法
            此方法中所有过程，都基于Senparc.NeuChar.基础功能，只为简化代码而设。
            </summary>
            <summary>
            微信请求的集中处理方法
            此方法中所有过程，都基于Senparc.NeuChar.基础功能，只为简化代码而设。
            </summary>
        </member>
        <member name="F:Senparc.NeuChar.MessageHandlers.MessageHandler`3._defaultMessageHandlerAsyncEvent">
            <summary>
            默认参数设置为 DefaultResponseMessageAsync
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.DefaultMessageHandlerAsyncEvent">
            <summary>
            <para>MessageHandler事件异步方法的默认调用方法（在没有override的情况下）。默认值：DefaultDefaultResponseMessageAsync。</para>
            <para>默认参数设置为 DefaultResponseMessageAsync，目的是为了确保默认状态下不会执行意料以外的代码，
            因此，如果需要在异步方法中调用同名的同步方法，请手动将此参数设置为SelfSynicMethod。</para>
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.WeixinContext">
            <summary>
            全局消息上下文
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.MessageEntityEnlighten">
            <summary>
            请求和响应消息有差别化的定义
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.ApiEnlighten">
            <summary>
            请求和响应消息有差别化的定义
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.CurrentMessageContext">
            <summary>
            当前用户消息上下文
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.WeixinOpenId">
            <summary>
            发送者用户名（OpenId）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.CancelExcute">
            <summary>
            取消执行Execute()方法。一般在OnExecuting()中用于临时阻止执行Execute()。
            默认为False。
            如果在执行OnExecuting()执行前设为True，则所有OnExecuting()、Execute()、OnExecuted()代码都不会被执行。
            如果在执行OnExecuting()执行过程中设为True，则后续Execute()及OnExecuted()代码不会被执行。
            建议在设为True的时候，给ResponseMessage赋值，以返回友好信息。
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.RequestDocument">
            <summary>
            在构造函数中转换得到原始XML数据
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.ResponseDocument">
            <summary>
            根据ResponseMessageBase获得转换后的ResponseDocument
            注意：这里每次请求都会根据当前的ResponseMessageBase生成一次，如需重用此数据，建议使用缓存或局部变量
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.FinalResponseDocument">
            <summary>
            最后返回的ResponseDocument。
            如果是Senparc.NeuChar.QY，则应当和ResponseDocument一致；如果是Senparc.NeuChar.QY，则应当在ResponseDocument基础上进行加密
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.RequestMessage">
            <summary>
            请求实体
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.ResponseMessage">
            <summary>
            响应实体
            正常情况下只有当执行Execute()方法后才可能有值。
            也可以结合Cancel，提前给ResponseMessage赋值。
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.UsedMessageAgent">
            <summary>
            是否使用了MessageAgent代理
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.OmitRepeatedMessage">
            <summary>
            忽略重复发送的同一条消息（通常因为微信服务器没有收到及时的响应）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.MessageIsRepeated">
            <summary>
            消息是否已经被去重
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandler`3.TextResponseMessage">
            <summary>
            文字类型返回消息
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.CommonInitialize(System.Xml.Linq.XDocument,System.Int32,System.Object)">
            <summary>
            构造函数公用的初始化方法
            </summary>
            <param name="postDataDocument"></param>
            <param name="maxRecordCount"></param>
            <param name="postData"></param>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.#ctor(System.IO.Stream,System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="inputStream"></param>
            <param name="maxRecordCount"></param>
            <param name="postData">需要传入到Init的参数</param>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.#ctor(System.Xml.Linq.XDocument,System.Int32,System.Object)">
            <summary>
            使用postDataDocument的构造函数
            </summary>
            <param name="postDataDocument"></param>
            <param name="maxRecordCount"></param>
            <param name="postData">需要传入到Init的参数</param>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.#ctor(Senparc.NeuChar.Entities.RequestMessageBase,System.Int32,System.Object)">
            <summary>
            <para>使用requestMessageBase的构造函数</para>
            <para>次构造函数提供给具体的类库进行测试使用，例如Senparc.NeuChar.Work</para>
            </summary>
            <param name="requestMessageBase"></param>
            <param name="maxRecordCount"></param>
            <param name="postData">需要传入到Init的参数</param>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.Init(System.Xml.Linq.XDocument,System.Object)">
            <summary>
            初始化，获取RequestDocument。
            Init中需要对上下文添加当前消息（如果使用上下文）
            </summary>
            <param name="requestDocument"></param>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandler`3.Execute">
            <summary>
            执行微信请求
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.IMessageHandler`2">
            <summary>
            IMessageHandler接口
            </summary>
            <typeparam name="TRequest">IRequestMessageBase</typeparam>
            <typeparam name="TResponse">IResponseMessageBase</typeparam>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandler`2.WeixinOpenId">
            <summary>
            发送者用户名（OpenId）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandler`2.CancelExcute">
            <summary>
            取消执行Execute()方法。一般在OnExecuting()中用于临时阻止执行Execute()。
            默认为False。
            如果在执行OnExecuting()执行前设为True，则所有OnExecuting()、Execute()、OnExecuted()代码都不会被执行。
            如果在执行OnExecuting()执行过程中设为True，则后续Execute()及OnExecuted()代码不会被执行。
            建议在设为True的时候，给ResponseMessage赋值，以返回友好信息。
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandler`2.RequestMessage">
            <summary>
            请求实体
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandler`2.ResponseMessage">
            <summary>
            响应实体
            只有当执行Execute()方法后才可能有值
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandler`2.UsedMessageAgent">
            <summary>
            是否使用了MessageAgent代理
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandler`2.OmitRepeatedMessage">
            <summary>
            忽略重复发送的同一条消息（通常因为微信服务器没有收到及时的响应）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandler`2.MessageIsRepeated">
            <summary>
            消息是否已经被去重
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.IMessageHandler`2.OnExecuting">
            <summary>
            执行微信请求前触发
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.IMessageHandler`2.Execute">
            <summary>
            执行微信请求
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.IMessageHandler`2.OnExecuted">
            <summary>
            执行微信请求后触发
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.IMessageHandler`2.OnExecutingAsync">
            <summary>
            执行微信请求前触发
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.IMessageHandler`2.ExecuteAsync">
            <summary>
            执行微信请求
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.IMessageHandler`2.OnExecutedAsync">
            <summary>
            执行微信请求后触发
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.IMessageHandlerDocument">
            <summary>
            为IMessageHandler单独提供XDocument类型的属性接口（主要是ResponseDocument）。
            分离这个接口的目的是为了在MvcExtension中对IMessageHandler解耦，使用IMessageHandlerDocument接口直接操作XML。
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerDocument.RequestDocument">
            <summary>
            在构造函数中转换得到原始XML数据
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerDocument.ResponseDocument">
            <summary>
            根据ResponseMessageBase获得转换后的ResponseDocument
            注意：这里每次请求都会根据当前的ResponseMessageBase生成一次，如需重用此数据，建议使用缓存或局部变量
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerDocument.FinalResponseDocument">
            <summary>
            最后返回的ResponseDocument。
             如果是Senparc.NeuChar.MP引用，并且未设置未加密，则应当和ResponseDocument一致；除此以外（Senparc.NeuChar.QY或已加密），则应当在ResponseDocument基础上进行加密
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerDocument.TextResponseMessage">
            <summary>
            文字返回信息。使用规则：当TextResponseMessage不为null时（""!=null），才获取ResponseDocument。
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.IMessageHandlerEnlighten">
            <summary>
            用于提供MessageHandler中的“请求及响应”详细类型定义
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerEnlighten.MessageEntityEnlighten">
            <summary>
            请求和响应消息有差别化的定义
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.IMessageHandlerEnlighten.ApiEnlighten">
            <summary>
            请求和响应消息有差别化的定义
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.MessageEntityEnlighten">
            <summary>
            MessageHandler初始化请求和响应消息的定义类
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageEntityEnlighten.NewResponseMessageMpNews">
            <summary>
            素材多图文
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageEntityEnlighten.NewSuccessResponseMessage">
            <summary>
            默认为 SuccessResponseMessage 类型，返回字符串 "success"
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.MessageHandlerNode">
            <summary>
            MessageHandler 的神经节点
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageHandlerNode.Config">
            <summary>
            设置信息（系统约定Config为固定名称）
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandlerNode.Execute(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.MessageHandlers.IMessageHandlerEnlighten,System.String)">
            <summary>
            执行NeuChar判断过程，获取响应消息
            </summary>
            <param name="requestMessage"></param>
            <param name="messageHandler"></param>
            <param name="accessTokenOrApi"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandlerNode.ExecuteAsync(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.MessageHandlers.IMessageHandlerEnlighten,System.String)">
            <summary>
            执行NeuChar判断过程，获取响应消息
            </summary>
            <param name="requestMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandlerNode.RenderResponseMessageText(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.MessageHandlers.Response,Senparc.NeuChar.MessageHandlers.MessageEntityEnlighten)">
            <summary>
            返回文字类型信息
            </summary>
            <param name="requestMessage"></param>
            <param name="responseConfig"></param>
            <returns></returns>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageHandlerNode.RenderResponseMessageImage(Senparc.NeuChar.Entities.IRequestMessageBase,Senparc.NeuChar.MessageHandlers.Response,Senparc.NeuChar.MessageHandlers.MessageEntityEnlighten)">
            <summary>
            返回图片类型信息
            </summary>
            <param name="requestMessage"></param>
            <param name="responseConfig"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.MessageReply">
            <summary>
            消息回复设置
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessageReply.MessagePair">
            <summary>
            请求-响应 配置列表
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessageReply.#ctor">
            <summary>
            MessageReply 构造函数
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.MessagePair">
            <summary>
            请求-响应 配置
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessagePair.Request">
            <summary>
            请求条件设置
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessagePair.Response">
            <summary>
            优先响应设置（必须）
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.MessagePair.ExtendResponses">
            <summary>
            后续响应设置（可选）
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.MessageHandlers.MessagePair.#ctor">
            <summary>
            MessagePair 构造函数
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.Request">
            <summary>
            请求配置
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.Request.Type">
            <summary>
            说明：目前只支持Text和Image
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.Request.Keywords">
            <summary>
            文本、事件的关键字
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.MessageHandlers.Response">
            <summary>
            响应配置
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.Response.Type">
            <summary>
            响应类型
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.MessageHandlers.Response.Content">
            <summary>
            响应内容
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.BaseNeuralNode.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.BaseNeuralNode.ChildrenNodes">
            <summary>
            所有子节点
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.BaseNeuralNode.Config">
            <summary>
            设置信息
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.ConfigRoot">
            <summary>
            用于传入设置的基础模型
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.ConfigRoot.Configs">
            <summary>
            详细的配置信息
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.INeuralNode.ChildrenNodes">
            <summary>
            所有子节点
            </summary>
        </member>
        <member name="P:Senparc.NeuChar.INeuralNode.Config">
            <summary>
            默认设置数据
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.INeuralNode.SetChildNode(Senparc.NeuChar.INeuralNode)">
            <summary>
            设置子节点
            </summary>
            <param name="childNode"></param>
        </member>
        <member name="T:Senparc.NeuChar.INeuralNodeConfig">
            <summary>
            节点设置信息接口
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.NeuralNodeConfig">
            <summary>
            节点设置信息
            </summary>
        </member>
        <member name="T:Senparc.NeuChar.NeuralSystem">
            <summary>
            神经系统，整个系统数据的根节点
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystem.#ctor">
            <summary>
            NeuChar 核心神经系统，包含所有神经节点信息
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystem.InitRoot">
            <summary>
            初始化 Root 参数
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystem.ReloadNode">
            <summary>
            加载节点信息
            </summary>
        </member>
        <member name="M:Senparc.NeuChar.NeuralSystem.GetNode(System.String,Senparc.NeuChar.INeuralNode)">
            <summary>
            获取指定Name的节点
            <para>TODO：建立索引搜索</para>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Senparc.NeuChar.RootNeuralNode">
            <summary>
            NeuralNode 根节点
            </summary>
        </member>
    </members>
</doc>
